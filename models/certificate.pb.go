// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: models/certificate.proto

package models

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Certificate struct {
	Domain        string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Issuer        string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Bundle        bool   `protobuf:"varint,3,opt,name=bundle,proto3" json:"bundle,omitempty"`
	San           string `protobuf:"bytes,4,opt,name=san,proto3" json:"san,omitempty"`
	Days          int32  `protobuf:"varint,5,opt,name=days,proto3" json:"days,omitempty"`
	RenewalDays   string `protobuf:"bytes,6,opt,name=renewal_days,json=renewalDays,proto3" json:"renewal_days,omitempty"`
	RenewalDate   string `protobuf:"bytes,7,opt,name=renewal_date,json=renewalDate,proto3" json:"renewal_date,omitempty"`
	DnsChallenge  string `protobuf:"bytes,8,opt,name=dns_challenge,json=dnsChallenge,proto3" json:"dns_challenge,omitempty"`
	HttpChallenge string `protobuf:"bytes,9,opt,name=http_challenge,json=httpChallenge,proto3" json:"http_challenge,omitempty"`
	Expires       string `protobuf:"bytes,10,opt,name=expires,proto3" json:"expires,omitempty"`
	Fingerprint   string `protobuf:"bytes,11,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Owner         string `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`
	Csr           string `protobuf:"bytes,13,opt,name=csr,proto3" json:"csr,omitempty"`
	Labels        string `protobuf:"bytes,14,opt,name=labels,proto3" json:"labels,omitempty"`
	Encryption    string `protobuf:"bytes,15,opt,name=encryption,proto3" json:"encryption,omitempty"`
	Serial        string `protobuf:"bytes,16,opt,name=serial,proto3" json:"serial,omitempty"`
	KeyType       string `protobuf:"bytes,17,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	// Unix timestamp in milliseconds when we have updated the key.
	UpdatedAt int64 `protobuf:"varint,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Unix timestamp in milliseconds when this entry was marked for deletion.
	// Reason for doing marking first, and delete later, is to make sure that replica nodes
	// watching the prefix will receive notification on "marking" -- at which point they can
	// already remove entry from memory. Actual deletion from KV store does *not* trigger
	// "watch" notification with a key for all KV stores.
	DeletedAt int64 `protobuf:"varint,19,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b24e4b1f6efed75, []int{0}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Certificate)(nil), "models.Certificate")
}

func init() { proto.RegisterFile("models/certificate.proto", fileDescriptor_8b24e4b1f6efed75) }

var fileDescriptor_8b24e4b1f6efed75 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xb3, 0xe4, 0x4f, 0x93, 0x49, 0x52, 0x8a, 0xa9, 0xd0, 0x80, 0xc4, 0x2a, 0x80, 0x90,
	0xc2, 0x81, 0xee, 0x81, 0x27, 0x28, 0x45, 0xe2, 0x1e, 0x71, 0xe2, 0x12, 0x39, 0xbb, 0x93, 0x8d,
	0x55, 0xaf, 0xbd, 0xb2, 0xbd, 0x6a, 0xf7, 0x2d, 0x38, 0xf3, 0x44, 0x3d, 0xf6, 0xc8, 0x11, 0x92,
	0x17, 0x41, 0xb6, 0xb7, 0x6a, 0x04, 0xb7, 0xf9, 0x7e, 0xbf, 0x6f, 0x24, 0x6b, 0x64, 0xc0, 0x4a,
	0x17, 0x24, 0x6d, 0x96, 0x93, 0x71, 0x62, 0x2b, 0x72, 0xee, 0xe8, 0xa2, 0x36, 0xda, 0x69, 0x36,
	0x8a, 0xe6, 0xd5, 0x79, 0xa9, 0x4b, 0x1d, 0x50, 0xe6, 0xa7, 0x68, 0xdf, 0xfe, 0x1c, 0xc0, 0xf4,
	0xea, 0x71, 0x87, 0xbd, 0x80, 0x51, 0xa1, 0x2b, 0x2e, 0x14, 0x26, 0x8b, 0x64, 0x39, 0x59, 0x75,
	0xc9, 0x73, 0x61, 0x6d, 0x43, 0x06, 0x9f, 0x44, 0x1e, 0x93, 0xe7, 0x9b, 0x46, 0x15, 0x92, 0xb0,
	0xbf, 0x48, 0x96, 0xe3, 0x55, 0x97, 0xd8, 0x19, 0xf4, 0x2d, 0x57, 0x38, 0x08, 0x65, 0x3f, 0x32,
	0x06, 0x83, 0x82, 0xb7, 0x16, 0x87, 0x8b, 0x64, 0x39, 0x5c, 0x85, 0x99, 0xbd, 0x81, 0x99, 0x21,
	0x45, 0x37, 0x5c, 0xae, 0x83, 0x1b, 0x85, 0xfa, 0xb4, 0x63, 0x5f, 0xfe, 0xab, 0x38, 0xc2, 0x93,
	0x7f, 0x2a, 0x8e, 0xd8, 0x3b, 0x98, 0x17, 0xca, 0xae, 0xf3, 0x1d, 0x97, 0x92, 0x54, 0x49, 0x38,
	0x0e, 0x9d, 0x59, 0xa1, 0xec, 0xd5, 0x03, 0x63, 0xef, 0xe1, 0x74, 0xe7, 0x5c, 0x7d, 0xd4, 0x9a,
	0x84, 0xd6, 0xdc, 0xd3, 0xc7, 0x1a, 0xc2, 0x09, 0xdd, 0xd6, 0xc2, 0x90, 0x45, 0x08, 0xfe, 0x21,
	0xb2, 0x05, 0x4c, 0xb7, 0x42, 0x95, 0x64, 0x6a, 0x23, 0x94, 0xc3, 0x69, 0x7c, 0xc7, 0x11, 0x62,
	0xe7, 0x30, 0xd4, 0x37, 0x8a, 0x0c, 0xce, 0x82, 0x8b, 0xc1, 0x5f, 0x22, 0xb7, 0x06, 0xe7, 0xf1,
	0x12, 0xb9, 0x0d, 0x37, 0x93, 0x7c, 0x43, 0xd2, 0xe2, 0x69, 0xbc, 0x65, 0x4c, 0x2c, 0x05, 0x20,
	0x95, 0x9b, 0xb6, 0x76, 0x42, 0x2b, 0x7c, 0x1a, 0xdc, 0x11, 0xf1, 0x7b, 0x96, 0x8c, 0xe0, 0x12,
	0xcf, 0xe2, 0x5e, 0x4c, 0xec, 0x25, 0x8c, 0xaf, 0xa9, 0x5d, 0xbb, 0xb6, 0x26, 0x7c, 0x16, 0x1f,
	0x7d, 0x4d, 0xed, 0xb7, 0xb6, 0x26, 0xf6, 0x1a, 0xa0, 0xa9, 0xfd, 0xdd, 0x8a, 0x35, 0x77, 0xc8,
	0x16, 0xc9, 0xb2, 0xbf, 0x9a, 0x74, 0xe4, 0xd2, 0x79, 0x5d, 0x90, 0xa4, 0x4e, 0x3f, 0x8f, 0xba,
	0x23, 0x97, 0xee, 0xf3, 0xd7, 0xbb, 0x3f, 0x69, 0xef, 0x6e, 0x9f, 0x26, 0xf7, 0xfb, 0x34, 0xf9,
	0xbd, 0x4f, 0x93, 0x1f, 0x87, 0xb4, 0x77, 0x7f, 0x48, 0x7b, 0xbf, 0x0e, 0x69, 0xef, 0xfb, 0x87,
	0x52, 0xb8, 0x5d, 0xb3, 0xb9, 0xc8, 0x75, 0x95, 0x6d, 0x4b, 0xdd, 0x38, 0x32, 0xba, 0xb9, 0xcd,
	0x78, 0x5e, 0xd1, 0xc7, 0x8a, 0x2b, 0x5e, 0x92, 0xc9, 0xe2, 0xdf, 0xdb, 0x8c, 0xc2, 0x67, 0xfb,
	0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0x33, 0x03, 0xa8, 0xa4, 0xa6, 0x02, 0x00, 0x00,
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != 0 {
		i = encodeVarintCertificate(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintCertificate(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.KeyType) > 0 {
		i -= len(m.KeyType)
		copy(dAtA[i:], m.KeyType)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.KeyType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Serial) > 0 {
		i -= len(m.Serial)
		copy(dAtA[i:], m.Serial)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Serial)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Encryption) > 0 {
		i -= len(m.Encryption)
		copy(dAtA[i:], m.Encryption)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Encryption)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Labels) > 0 {
		i -= len(m.Labels)
		copy(dAtA[i:], m.Labels)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Labels)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Csr) > 0 {
		i -= len(m.Csr)
		copy(dAtA[i:], m.Csr)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Csr)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Expires) > 0 {
		i -= len(m.Expires)
		copy(dAtA[i:], m.Expires)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Expires)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.HttpChallenge) > 0 {
		i -= len(m.HttpChallenge)
		copy(dAtA[i:], m.HttpChallenge)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.HttpChallenge)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DnsChallenge) > 0 {
		i -= len(m.DnsChallenge)
		copy(dAtA[i:], m.DnsChallenge)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.DnsChallenge)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RenewalDate) > 0 {
		i -= len(m.RenewalDate)
		copy(dAtA[i:], m.RenewalDate)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.RenewalDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RenewalDays) > 0 {
		i -= len(m.RenewalDays)
		copy(dAtA[i:], m.RenewalDays)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.RenewalDays)))
		i--
		dAtA[i] = 0x32
	}
	if m.Days != 0 {
		i = encodeVarintCertificate(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x28
	}
	if len(m.San) > 0 {
		i -= len(m.San)
		copy(dAtA[i:], m.San)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.San)))
		i--
		dAtA[i] = 0x22
	}
	if m.Bundle {
		i--
		if m.Bundle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCertificate(dAtA []byte, offset int, v uint64) int {
	offset -= sovCertificate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	if m.Bundle {
		n += 2
	}
	l = len(m.San)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	if m.Days != 0 {
		n += 1 + sovCertificate(uint64(m.Days))
	}
	l = len(m.RenewalDays)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.RenewalDate)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.DnsChallenge)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.HttpChallenge)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Expires)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Csr)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Labels)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Encryption)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 2 + l + sovCertificate(uint64(l))
	}
	l = len(m.KeyType)
	if l > 0 {
		n += 2 + l + sovCertificate(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovCertificate(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 2 + sovCertificate(uint64(m.DeletedAt))
	}
	return n
}

func sovCertificate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCertificate(x uint64) (n int) {
	return sovCertificate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertificate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bundle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bundle = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field San", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.San = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewalDays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenewalDays = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewalDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenewalDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expires = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Csr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encryption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encryption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCertificate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertificate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertificate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertificate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCertificate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCertificate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCertificate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCertificate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertificate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCertificate = fmt.Errorf("proto: unexpected end of group")
)
